# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,112,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,4,8,73,
        8,8,11,8,12,8,74,1,9,4,9,78,8,9,11,9,12,9,79,1,10,4,10,83,8,10,11,
        10,12,10,84,1,10,1,10,4,10,89,8,10,11,10,12,10,90,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,3,15,102,8,15,1,15,1,15,1,16,4,16,
        107,8,16,11,16,12,16,108,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        1,0,2,2,0,65,90,97,122,2,0,9,9,32,32,117,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,
        35,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,0,9,47,1,0,0,0,11,
        53,1,0,0,0,13,58,1,0,0,0,15,64,1,0,0,0,17,72,1,0,0,0,19,77,1,0,0,
        0,21,82,1,0,0,0,23,92,1,0,0,0,25,94,1,0,0,0,27,96,1,0,0,0,29,98,
        1,0,0,0,31,101,1,0,0,0,33,106,1,0,0,0,35,36,5,60,0,0,36,37,5,69,
        0,0,37,38,5,79,0,0,38,39,5,70,0,0,39,40,5,62,0,0,40,2,1,0,0,0,41,
        42,5,61,0,0,42,4,1,0,0,0,43,44,5,40,0,0,44,6,1,0,0,0,45,46,5,41,
        0,0,46,8,1,0,0,0,47,48,5,119,0,0,48,49,5,114,0,0,49,50,5,105,0,0,
        50,51,5,116,0,0,51,52,5,101,0,0,52,10,1,0,0,0,53,54,5,114,0,0,54,
        55,5,101,0,0,55,56,5,97,0,0,56,57,5,100,0,0,57,12,1,0,0,0,58,59,
        5,40,0,0,59,60,5,105,0,0,60,61,5,110,0,0,61,62,5,116,0,0,62,63,5,
        41,0,0,63,14,1,0,0,0,64,65,5,40,0,0,65,66,5,114,0,0,66,67,5,101,
        0,0,67,68,5,97,0,0,68,69,5,108,0,0,69,70,5,41,0,0,70,16,1,0,0,0,
        71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,
        0,0,0,75,18,1,0,0,0,76,78,2,48,57,0,77,76,1,0,0,0,78,79,1,0,0,0,
        79,77,1,0,0,0,79,80,1,0,0,0,80,20,1,0,0,0,81,83,2,48,57,0,82,81,
        1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,
        86,88,5,46,0,0,87,89,2,48,57,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,
        1,0,0,0,90,91,1,0,0,0,91,22,1,0,0,0,92,93,5,47,0,0,93,24,1,0,0,0,
        94,95,5,42,0,0,95,26,1,0,0,0,96,97,5,43,0,0,97,28,1,0,0,0,98,99,
        5,45,0,0,99,30,1,0,0,0,100,102,5,13,0,0,101,100,1,0,0,0,101,102,
        1,0,0,0,102,103,1,0,0,0,103,104,5,10,0,0,104,32,1,0,0,0,105,107,
        7,1,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,
        1,0,0,0,109,110,1,0,0,0,110,111,6,16,0,0,111,34,1,0,0,0,7,0,74,79,
        84,90,101,108,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WRITE = 5
    READ = 6
    TOINT = 7
    TOREAL = 8
    ID = 9
    INT = 10
    REAL = 11
    DIVOP = 12
    MULOP = 13
    ADDOP = 14
    SUBOP = 15
    NEWLINE = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<EOF>'", "'='", "'('", "')'", "'write'", "'read'", "'(int)'", 
            "'(real)'", "'/'", "'*'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "WRITE", "READ", "TOINT", "TOREAL", "ID", "INT", "REAL", "DIVOP", 
            "MULOP", "ADDOP", "SUBOP", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WRITE", "READ", "TOINT", 
                  "TOREAL", "ID", "INT", "REAL", "DIVOP", "MULOP", "ADDOP", 
                  "SUBOP", "NEWLINE", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


