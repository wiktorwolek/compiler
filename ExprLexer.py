# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,74,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,
        0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,6,4,6,50,8,6,11,6,12,6,51,1,7,4,7,55,8,7,11,7,12,
        7,56,1,8,1,8,1,9,1,9,1,10,3,10,64,8,10,1,10,1,10,1,11,4,11,69,8,
        11,11,11,12,11,70,1,11,1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,1,0,2,2,0,65,90,97,122,2,0,9,9,32,32,
        77,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
        11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
        21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,31,1,0,0,0,5,33,1,0,0,0,7,
        35,1,0,0,0,9,37,1,0,0,0,11,43,1,0,0,0,13,49,1,0,0,0,15,54,1,0,0,
        0,17,58,1,0,0,0,19,60,1,0,0,0,21,63,1,0,0,0,23,68,1,0,0,0,25,26,
        5,60,0,0,26,27,5,69,0,0,27,28,5,79,0,0,28,29,5,70,0,0,29,30,5,62,
        0,0,30,2,1,0,0,0,31,32,5,61,0,0,32,4,1,0,0,0,33,34,5,40,0,0,34,6,
        1,0,0,0,35,36,5,41,0,0,36,8,1,0,0,0,37,38,5,119,0,0,38,39,5,114,
        0,0,39,40,5,105,0,0,40,41,5,116,0,0,41,42,5,101,0,0,42,10,1,0,0,
        0,43,44,5,114,0,0,44,45,5,101,0,0,45,46,5,97,0,0,46,47,5,100,0,0,
        47,12,1,0,0,0,48,50,7,0,0,0,49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,
        0,0,0,51,52,1,0,0,0,52,14,1,0,0,0,53,55,2,48,57,0,54,53,1,0,0,0,
        55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,16,1,0,0,0,58,59,5,
        43,0,0,59,18,1,0,0,0,60,61,5,42,0,0,61,20,1,0,0,0,62,64,5,13,0,0,
        63,62,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,66,5,10,0,0,66,22,1,
        0,0,0,67,69,7,1,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,70,
        71,1,0,0,0,71,72,1,0,0,0,72,73,6,11,0,0,73,24,1,0,0,0,5,0,51,56,
        63,70,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    WRITE = 5
    READ = 6
    ID = 7
    INT = 8
    ADD = 9
    MUL = 10
    NEWLINE = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<EOF>'", "'='", "'('", "')'", "'write'", "'read'", "'+'", 
            "'*'" ]

    symbolicNames = [ "<INVALID>",
            "WRITE", "READ", "ID", "INT", "ADD", "MUL", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WRITE", "READ", "ID", 
                  "INT", "ADD", "MUL", "NEWLINE", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


